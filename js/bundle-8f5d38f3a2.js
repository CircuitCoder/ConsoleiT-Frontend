var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},__extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)};System.register("card",["angular2/core","angular2/common"],function(exports_1,context_1){"use strict";var core_1,common_1,CICardService,CICardContent,CICard,CICardView;context_1&&context_1.id;return{setters:[function(core_1_1){core_1=core_1_1},function(common_1_1){common_1=common_1_1}],execute:function(){CICardService=function(){function CICardService(){}return CICardService.prototype.register=function(card){CICardService.cards.push(card),CICardService.visible&&setTimeout(function(){return card.setVisible(!0)},50)},CICardService.prototype.setVisibleAll=function(visible){CICardService.visible=visible;var startPoint=CICardService.cards.reduce(function(prev,c){var p=c.getPosition();return Math.min(prev,2*p.top+p.left)},1/0);return Promise.all(CICardService.cards.map(function(c){var p=c.getPosition();return new Promise(function(resolve,reject){setTimeout(function(){c.setVisible(visible).then(function(){return resolve()})},CICardService.cards.length>10?0:(2*p.top+p.left-startPoint)/CICardService.animationSpeed)})}))},CICardService.prototype.clearCard=function(){CICardService.cards=new Array},CICardService.animationSpeed=3,CICardService.cards=new Array,CICardService.shownCard=0,CICardService.visible=!1,CICardService=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[])],CICardService)}(),exports_1("CICardService",CICardService),CICardContent=function(){function CICardContent(_el){this._el=_el}return CICardContent.prototype.getItemCount=function(){return this._el.nativeElement.children.length},CICardContent.prototype.toggle=function(){var _this=this;return new Promise(function(resolve){for(var i=0;i<_this._el.nativeElement.children.length;++i)!function(_i){setTimeout(function(){_this._el.nativeElement.children[_i].classList.toggle("visible")},100*_i)}(i);setTimeout(resolve,100*_this._el.nativeElement.children.length+100)})},CICardContent=__decorate([core_1.Directive({selector:".ci-card-content"}),__metadata("design:paramtypes",[core_1.ElementRef])],CICardContent)}(),CICard=function(){function CICard(_el,_cardService){this._el=_el,this._cardService=_cardService,this.visible=!1}return CICard.prototype.ngAfterViewInit=function(){this._cardService.register(this)},CICard.prototype.setVisible=function(visible){var _this=this;return visible==this.visible?Promise.resolve():visible?(this.visible=visible,Promise.all([new Promise(function(resolve){setTimeout(resolve,400)}),new Promise(function(resolve){setTimeout(function(){resolve(_this.contentWrapper.toggle())},200)})])):(this.visible=visible,Promise.all([new Promise(function(resolve){setTimeout(resolve,100*_this.contentWrapper.getItemCount()-200)}),this.contentWrapper.toggle()]))},CICard.prototype.getPosition=function(){var rect=this._el.nativeElement.getBoundingClientRect();return rect},CICard.prototype.toggleContent=function(){return this.contentWrapper.toggle()},__decorate([core_1.ViewChild(CICardContent),__metadata("design:type",CICardContent)],CICard.prototype,"contentWrapper",void 0),CICard=__decorate([core_1.Component({selector:"ci-card",template:'<div class="mdl-card" [ngClass]="{\'mdl-shadow--4dp\': visible, \'visible\': visible}">   <div class="ci-card-content">     <div class="mdl-card__title">       <div class="mdl-card__title-text"><ng-content select="ci-card-title"></ng-content></div>     </div>      <div class="ci-card-inner">       <ng-content></ng-content>     </div>      <div><ng-content select="ci-card-table"></ng-content></div> <!-- Wapper for animation -->      <!-- Keep the following element in one line for empty checking -->     <div class="mdl-card__actions mdl-card--border"><ng-content select="ci-card-actions"></ng-content></div>   </div> </div>',directives:[common_1.NgClass,CICardContent]}),__metadata("design:paramtypes",[core_1.ElementRef,CICardService])],CICard)}(),exports_1("CICard",CICard),CICardView=function(){function CICardView(_cardService){this._cardService=_cardService}return CICardView.prototype.ngAfterViewInit=function(){this._cardService.setVisibleAll(!0)},CICardView.prototype.routerOnActivate=function(){this._cardService.clearCard()},CICardView.prototype.routerOnDeactivate=function(){return this._cardService.setVisibleAll(!1)},CICardView}(),exports_1("CICardView",CICardView)}}}),System.register("config",[],function(exports_2,context_2){"use strict";var backend;context_2&&context_2.id;return{setters:[],execute:function(){exports_2("backend",backend={host:"127.0.0.1",port:3e3,https:!1})}}}),System.register("http",["angular2/http","config"],function(exports_3,context_3){"use strict";var http_1,Config,CIHttp;context_3&&context_3.id;return{setters:[function(http_1_1){http_1=http_1_1},function(Config_1){Config=Config_1}],execute:function(){CIHttp=function(){function CIHttp(_http,prefix){this._http=_http,this.urlBase=(Config.backend.https?"https://":"http://")+Config.backend.host+":"+Config.backend.port,this.reqOpt=new http_1.RequestOptions({headers:new http_1.Headers({"Content-Type":"application/json"})}),this.urlBase+=prefix}return CIHttp.prototype.get=function(action,cb){var req=this._http.get(this.urlBase+action,this.reqOpt);req.subscribe(function(res){cb(!1,res.json())},function(error){cb(error,null)})},CIHttp.prototype.post=function(action,data,cb){var req=this._http.post(this.urlBase+action,JSON.stringify(data),this.reqOpt);req.subscribe(function(res){cb(!1,res.json())},function(error){cb(error,null)})},CIHttp}(),exports_3("CIHttp",CIHttp)}}}),System.register("notifier",["angular2/core"],function(exports_4,context_4){"use strict";var core_2,CINotifier;context_4&&context_4.id;return{setters:[function(core_2_1){core_2=core_2_1}],execute:function(){CINotifier=function(){function CINotifier(){this.setContainer(document.getElementById("ci-snackbar"))}return CINotifier.prototype.setContainer=function(container){CINotifier.container=container},CINotifier.prototype.register=function(key,value){CINotifier.msgMap[key]=value},CINotifier.prototype.show=function(key){CINotifier.container.MaterialSnackbar&&CINotifier.container.MaterialSnackbar.showSnackbar({message:key in CINotifier.msgMap?CINotifier.msgMap[key]:key,timeout:2e3})},CINotifier.msgMap={CredentialRejected:"凭证错误",DuplicatedEmail:"邮箱已占用",RegisterationEmailSent:"我们已将密码发往您的邮箱",NotLoggedIn:"请先登录",OperationSuccessful:"操作成功",InvalidCondition:"非法操作",InvalidInput:"非法输入",AlreadyLoggedIn:"您已登陆",PasswdMismatch:"密码不匹配",$Unknown:"未知错误"},CINotifier=__decorate([core_2.Injectable(),__metadata("design:paramtypes",[])],CINotifier)}(),exports_4("CINotifier",CINotifier)}}}),System.register("conf",["angular2/http","angular2/core","http","notifier"],function(exports_5,context_5){"use strict";var http_2,core_3,http_3,notifier_1,CIConfService;context_5&&context_5.id;return{setters:[function(http_2_1){http_2=http_2_1},function(core_3_1){core_3=core_3_1},function(http_3_1){http_3=http_3_1},function(notifier_1_1){notifier_1=notifier_1_1}],execute:function(){CIConfService=function(_super){function CIConfService(_http,_notifier){_super.call(this,_http,"/conf"),this._notifier=_notifier}return __extends(CIConfService,_super),CIConfService.prototype.registerConf=function(data){CIConfService.conf=data.conf,CIConfService.members=data.members,CIConfService.group=data.group},CIConfService.prototype.getConf=function(){return CIConfService.conf},CIConfService.prototype.getMemberMap=function(){return CIConfService.members.reduce(function(prev,e){return prev[e._id]=e,prev},{})},CIConfService.prototype.getRoleMap=function(){return CIConfService.conf.roles.reduce(function(prev,e){return prev[e._id]=e,prev},{})},CIConfService.prototype.getGroup=function(){return CIConfService.group},CIConfService.prototype.getStatus=function(conf){return conf?CIConfService.STATUS_MAP[conf.status]:CIConfService.STATUS_MAP[CIConfService.conf.status]},CIConfService.prototype.hasPerm=function(uid,perm){var roleMap=this.getRoleMap(),roleId=-1;if(CIConfService.conf.members.forEach(function(e){e._id==uid&&(roleId=e.role)}),-1==roleId)return!1;for(var permObj=roleMap[roleId].perm,seg=perm.split("."),i=0;i<seg.length;++i){if(permObj.all)return!0;if(!(seg[i]in permObj))return!1;if(permObj=permObj[seg[i]],"boolean"==typeof permObj)return permObj}return!1},CIConfService.prototype.getList=function(cb){var _this=this;this.get("/",function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):res.error?_this._notifier.show(res.error):cb(res.confs.sort(function(a,b){return!!a.pinned!=!!b.pinned?a.pinned:a.title.localeCompare(b.title)}))})},CIConfService.prototype.getAvailList=function(cb){var _this=this;this.get("/available",function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):res.error?_this._notifier.show(res.error):cb(res.confs)})},CIConfService.prototype.getData=function(id,cb){var _this=this;this.get("/"+id,function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):res.error?_this._notifier.show(res.error):cb(res)})},CIConfService.prototype.postSettings=function(id,settings,cb){var _this=this;this.post("/"+id,settings,function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):res.error?_this._notifier.show(res.error):cb(res)})},CIConfService.prototype.updateMember=function(id,role){},CIConfService.prototype.deleteMember=function(id){},CIConfService.prototype.getForm=function(formType,cb){var _this=this,id=CIConfService.conf._id;this.get("/"+id+"/"+formType+"/form",function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):cb(res)})},CIConfService.prototype.postForm=function(formType,data,cb){var _this=this,id=CIConfService.conf._id;this.post("/"+id+"/"+formType+"/form",{form:data},function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):cb(res)})},CIConfService.prototype.getFormResult=function(formType,uid,cb){var _this=this;this.get("/"+CIConfService.conf._id+"/"+formType+"/"+uid,function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):cb({status:res.status?res.status:0,submission:res.submission?JSON.parse(res.submission):{}})})},CIConfService.prototype.postApplication=function(formType,uid,data,cb){var _this=this;this.post("/"+CIConfService.conf._id+"/"+formType+"/"+uid,{content:data},function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):cb(res)})},CIConfService.prototype.getFormResults=function(formType,cb){var _this=this;this.get("/"+CIConfService.conf._id+"/"+formType+"/all",function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):cb(res)})},CIConfService.STATUS_MAP={0:"进行准备",1:"招募学术团队"},CIConfService=__decorate([core_3.Injectable(),__metadata("design:paramtypes",[http_2.Http,notifier_1.CINotifier])],CIConfService)}(http_3.CIHttp),exports_5("CIConfService",CIConfService)}}}),System.register("data",[],function(exports_6,context_6){"use strict";context_6&&context_6.id;return{setters:[],execute:function(){}}}),System.register("mdl",["angular2/core"],function(exports_7,context_7){"use strict";var core_4,MDL;context_7&&context_7.id;return{setters:[function(core_4_1){core_4=core_4_1}],execute:function(){MDL=function(){function MDL(_el){this._el=_el}return MDL.prototype.ngAfterViewInit=function(){componentHandler.upgradeDom()},MDL=__decorate([core_4.Directive({selector:"[ci-mdl]"}),__metadata("design:paramtypes",[core_4.ElementRef])],MDL)}(),exports_7("MDL",MDL)}}}),System.register("login",["angular2/http","angular2/core","notifier","http"],function(exports_8,context_8){"use strict";var http_4,core_5,notifier_2,http_5,CILoginService;context_8&&context_8.id;return{setters:[function(http_4_1){http_4=http_4_1},function(core_5_1){core_5=core_5_1},function(notifier_2_1){notifier_2=notifier_2_1},function(http_5_1){http_5=http_5_1}],execute:function(){CILoginService=function(_super){function CILoginService(_http,_notifier){_super.call(this,_http,"/account"),this._notifier=_notifier}return __extends(CILoginService,_super),CILoginService.prototype.addListener=function(l){CILoginService.listeners.push(l)},CILoginService.prototype.doLogin=function(email,passwd){var _this=this;this.post("/login",{email:email,passwd:passwd},function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):res.error?_this._notifier.show(res.error):(CILoginService.user=res.user,CILoginService.listeners.forEach(function(l){l.onLogin&&l.onLogin(res.user)}))})},CILoginService.prototype.doLogout=function(){var _this=this;this.get("/logout",function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):res.error?_this._notifier.show(res.error):(_this._notifier.show(res.msg),CILoginService.user=null,CILoginService.listeners.forEach(function(l){l.onLogout&&l.onLogout()}))})},CILoginService.prototype.doRegister=function(email,realname,next){var _this=this;this.post("/register",{email:email,realname:realname},function(err,res){if(err)console.log(err),_this._notifier.show("$Unknown");else{if(!res.error)return _this._notifier.show(res.msg),next();_this._notifier.show(res.error)}})},CILoginService.prototype.doRestore=function(){var _this=this;this.get("/restore",function(err,res){err?(console.log(err),_this._notifier.show("$Unknown")):(res.user&&(CILoginService.user=res.user),CILoginService.listeners.forEach(function(l){l.onRestore&&l.onRestore(res.error,res.user)}))})},CILoginService.prototype.doChangePasswd=function(oripasswd,passwd,next){var _this=this;this.post("/settings/passwd",{oripasswd:oripasswd,passwd:passwd},function(err,res){if(err)console.log(err),_this._notifier.show("$Unknown");else{if(!res.error)return _this._notifier.show(res.msg),next();_this._notifier.show(res.error)}})},CILoginService.prototype.getUser=function(){return CILoginService.user},CILoginService.prototype.isLoggedIn=function(){return null!=CILoginService.user},CILoginService.listeners=new Array,CILoginService.user=null,CILoginService=__decorate([core_5.Injectable(),__metadata("design:paramtypes",[http_4.Http,notifier_2.CINotifier])],CILoginService)}(http_5.CIHttp),exports_8("CILoginService",CILoginService)}}}),System.register("views/dashboard",["angular2/core","angular2/router","card","frame.service","login","mdl"],function(exports_9,context_9){"use strict";var core_6,router_1,card_1,frame_service_1,login_1,mdl_1,CIDashboard;context_9&&context_9.id;return{setters:[function(core_6_1){core_6=core_6_1},function(router_1_1){router_1=router_1_1},function(card_1_1){card_1=card_1_1},function(frame_service_1_1){frame_service_1=frame_service_1_1},function(login_1_1){login_1=login_1_1},function(mdl_1_1){mdl_1=mdl_1_1}],execute:function(){CIDashboard=function(_super){function CIDashboard(_cardService,_loginService,_frame){_super.call(this,_cardService),this._loginService=_loginService,this.user=_loginService.getUser(),_frame.setState("主页",[])}return __extends(CIDashboard,_super),CIDashboard.prototype.gotoConsoleiT=function(){window.location.href="https://bjmun.org/console-it/client/"},CIDashboard=__decorate([core_6.Component({template:'<div class="ci-card-container" type="2-col">   <div class="ci-card-col">     <ci-card ci-mdl>       <ci-card-title>欢迎, {{ user.realname }}</ci-card-title>       <div class="mdl-card__supporting-text">         <button class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" [routerLink]="[\'/ConfList\']">           查看正在报名中的会议         </button>       </div>     </ci-card>   </div>   <div class="ci-card-col">     <ci-card>       <ci-card-title>下载会议软件?</ci-card-title>       <div class="mdl-card__supporting-text">         在这里<br/>       </div>       <ci-card-actions>         <button class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" (click) = "gotoConsoleiT()">           <!--<i class="material-icons">file_download</i>-->Console iT Client         </button>       </ci-card-actions>     </ci-card>   </div> </div>',directives:[card_1.CICard,mdl_1.MDL,router_1.ROUTER_DIRECTIVES]}),__metadata("design:paramtypes",[card_1.CICardService,login_1.CILoginService,frame_service_1.CIFrameService])],CIDashboard)}(card_1.CICardView),exports_9("CIDashboard",CIDashboard)}}}),System.register("views/login",["angular2/core","angular2/router","login","frame.service","card","mdl"],function(exports_10,context_10){"use strict";var core_7,router_2,login_2,frame_service_2,card_2,mdl_2,CILogin;context_10&&context_10.id;return{setters:[function(core_7_1){core_7=core_7_1},function(router_2_1){router_2=router_2_1},function(login_2_1){login_2=login_2_1},function(frame_service_2_1){frame_service_2=frame_service_2_1},function(card_2_1){card_2=card_2_1},function(mdl_2_1){mdl_2=mdl_2_1}],execute:function(){CILogin=function(_super){function CILogin(_loginService,_cardService,_frame,_router,_routeData,_routeParams){_super.call(this,_cardService),this._loginService=_loginService,this._router=_router,this._routeData=_routeData,this._routeParams=_routeParams,_frame.setState("",[]),this.data={realname:"",email:"",passwd:""},this.isRegister="register"==this._routeData.get("action")}return __extends(CILogin,_super),CILogin.prototype.commit=function(){var _this=this;this.isRegister?this._loginService.doRegister(this.data.email,this.data.realname,function(){_this.switchState()}):this._loginService.doLogin(this.data.email,this.data.passwd)},CILogin.prototype.switchState=function(){var _this=this;this.isRegister?this._router.navigate(["Login"]):this._router.navigate(["Register"]),this.loginCard.toggleContent().then(function(){_this.isRegister=!_this.isRegister,_this.loginCard.toggleContent()})},__decorate([core_7.ViewChild(card_2.CICard),__metadata("design:type",card_2.CICard)],CILogin.prototype,"loginCard",void 0),CILogin=__decorate([core_7.Component({template:'<div class="login-title">   <canvas class="login-canvas"></canvas> </div> <div class="login-box">   <ci-card>     <ci-card-title>       {{ isRegister ? "注册" : "登陆" }}     </ci-card-title>     <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" ci-mdl>       <input class="mdl-textfield__input" type="text" id="ci-login-email" [(ngModel)]="data.email">       <label class="mdl-textfield__label" for="ci-login-email">邮箱</label>     </div>     <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" ci-mdl *ngIf="!isRegister">       <input class="mdl-textfield__input" type="password" id="ci-login-passwd" [(ngModel)]="data.passwd">       <label class="mdl-textfield__label" for="ci-login-passwd">密码</label>     </div>     <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" ci-mdl *ngIf="isRegister">       <input class="mdl-textfield__input" type="text" id="ci-login-realname" [(ngModel)]="data.realname">       <label class="mdl-textfield__label" for="ci-login-realname">真实姓名</label>     </div>     <ci-card-actions>       <button class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" (click) = "commit()" ci-mdl>         {{ isRegister ? "注册" : "登陆" }}       </button>       <button class="mdl-button mdl-js-button mdl-js-ripple-effect state-button" (click)="switchState()" ci-mdl>         {{ isRegister ? "登陆" : "注册" }}       </button>     </ci-card-actions>   </ci-card> </div>',directives:[card_2.CICard,mdl_2.MDL,router_2.ROUTER_DIRECTIVES]}),__metadata("design:paramtypes",[login_2.CILoginService,card_2.CICardService,frame_service_2.CIFrameService,router_2.Router,router_2.RouteData,router_2.RouteParams])],CILogin)}(card_2.CICardView),exports_10("CILogin",CILogin)}}}),System.register("views/profile",["angular2/core","card","login","frame.service","notifier","mdl"],function(exports_11,context_11){"use strict";var core_8,card_3,login_3,frame_service_3,notifier_3,mdl_3,CIProfile;context_11&&context_11.id;return{setters:[function(core_8_1){core_8=core_8_1},function(card_3_1){card_3=card_3_1},function(login_3_1){login_3=login_3_1},function(frame_service_3_1){frame_service_3=frame_service_3_1},function(notifier_3_1){notifier_3=notifier_3_1},function(mdl_3_1){mdl_3=mdl_3_1}],execute:function(){CIProfile=function(_super){function CIProfile(_cardService,_loginService,_notifier,_frame){_super.call(this,_cardService),this._loginService=_loginService,this._notifier=_notifier,this.user=_loginService.getUser(),_frame.setState("个人资料",[])}return __extends(CIProfile,_super),CIProfile.prototype.updatePasswd=function(){return this.passwd&&""!=this.passwd?void this._loginService.doChangePasswd(this.oripasswd,this.passwd,function(){}):this._notifier.show("InvalidInput")},CIProfile.prototype.gotoGravatar=function(){window.location.href="//gravatar.lug.ustc.edu.cn/"},CIProfile=__decorate([core_8.Component({template:'<div class="ci-card-container" type="2-col">   <div class="ci-card-col">     <ci-card>       <ci-card-title>         个人信息       </ci-card-title>       <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">         <input class="mdl-textfield__input" type="text" id="ci-profile-realname" [(ngModel)]="user.realname" disabled>         <label class="mdl-textfield__label" for="ci-profile-realname">真实姓名</label>       </div>       <br/>       <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">         <input class="mdl-textfield__input" type="text" id="ci-profile-email" [(ngModel)]="user.email" disabled>         <label class="mdl-textfield__label" for="ci-profile-email">注册邮箱</label>       </div>       <ci-card-actions>         <button class="mdl-button--raised mdl-button mdl-js-button mdl-js-ripple-effect" (click)="gotoGravatar()">           前往 Gravatar 更换头像         </button>       </ci-card-actions>     </ci-card>   </div>    <div class="ci-card-col">     <ci-card ci-mdl>       <ci-card-title>         账户与安全       </ci-card-title>       <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">         <input class="mdl-textfield__input" type="password" id="ci-profile-oripasswd" [(ngModel)]="oripasswd">         <label class="mdl-textfield__label" for="ci-profile-oripasswd">当前密码</label>       </div>       <br/>       <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">         <input class="mdl-textfield__input" type="password" id="ci-profile-passwd" [(ngModel)]="passwd">         <label class="mdl-textfield__label" for="ci-profile-passwd">新密码</label>       </div>        <ci-card-actions>         <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--raised mdl-button--colored" type="submit" (click) = "updatePasswd()">           更新密码         </button>       </ci-card-actions>     </ci-card>   </div> </div>',directives:[card_3.CICard,mdl_3.MDL]}),__metadata("design:paramtypes",[card_3.CICardService,login_3.CILoginService,notifier_3.CINotifier,frame_service_3.CIFrameService])],CIProfile)}(card_3.CICardView),exports_11("CIProfile",CIProfile)}}}),System.register("pipes",["angular2/core"],function(exports_12,context_12){"use strict";var core_9,CIFuncFilter;context_12&&context_12.id;return{setters:[function(core_9_1){core_9=core_9_1}],execute:function(){CIFuncFilter=function(){function CIFuncFilter(){}return CIFuncFilter.prototype.transform=function(values,args){return values.filter(function(e){return args[0].apply(null,[e].concat(args.slice(1)))})},CIFuncFilter=__decorate([core_9.Pipe({name:"funcFilter"}),__metadata("design:paramtypes",[])],CIFuncFilter)}(),exports_12("CIFuncFilter",CIFuncFilter)}}}),System.register("util",[],function(exports_13,context_13){"use strict";function generateGravatar(email){return"https://gravatar.lug.ustc.edu.cn/avatar/"+md5(email)+"?d=mm&r=g"}context_13&&context_13.id;return exports_13("generateGravatar",generateGravatar),{setters:[],execute:function(){}}}),System.register("views/conf",["angular2/core","angular2/router","card","frame.service","conf","login","notifier","pipes","mdl","util"],function(exports_14,context_14){"use strict";var core_10,router_3,card_4,frame_service_4,conf_1,login_4,notifier_4,pipes_1,mdl_4,CIUtil,CIConfApplicationList,CIConfApplication,CIConfHome,CIConfForm,CIConfSettings,CIConf,CIConfList;context_14&&context_14.id;return{setters:[function(core_10_1){core_10=core_10_1},function(router_3_1){router_3=router_3_1},function(card_4_1){card_4=card_4_1},function(frame_service_4_1){frame_service_4=frame_service_4_1},function(conf_1_1){conf_1=conf_1_1},function(login_4_1){login_4=login_4_1},function(notifier_4_1){notifier_4=notifier_4_1},function(pipes_1_1){pipes_1=pipes_1_1},function(mdl_4_1){mdl_4=mdl_4_1},function(CIUtil_1){CIUtil=CIUtil_1}],execute:function(){CIConfApplicationList=function(_super){function CIConfApplicationList(_card,_conf,params){_super.call(this,_card),this._conf=_conf,this.submissions=[],this.searchStr="",this.formType=params.get("type")}return __extends(CIConfApplicationList,_super),CIConfApplicationList.prototype.routerOnActivate=function(){var _this=this;return this._conf.getFormResults(this.formType,function(res){console.log(res.members),_this.membersMap=res.members.reduce(function(prev,e){return prev[e._id]=e,prev},{}),console.log(_this.membersMap),_this.submissions=res.list}),_super.prototype.routerOnActivate.call(this)},CIConfApplicationList.prototype.flt=function(value,str,membersMap,getStatusText){return""==str?!0:getStatusText(value.status)==str||-1!=membersMap[value._id].realname.indexOf(str)},CIConfApplicationList.prototype.getStatusText=function(id){return 1==id?"等待审核":2==id?"通过":3==id?"拒绝":String(id)},CIConfApplicationList=__decorate([core_10.Component({template:'<div class="ci-card-container" type="action">   <div class="ci-card-col wide">     <ci-card>       <ci-card-title>         提交状态       </ci-card-title>       <div class="mdl-card__supporting-text ci-annotation">         {{ submissions.length == 0 ? "目前无人提交申请" : "目前有 " + submissions.length + " 人提交申请" }}       </div>       <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" ci-mdl>         <input class="mdl-textfield__input" type="text" id="ci-app-listing-search" [(ngModel)]="searchStr">         <label class="mdl-textfield__label" for="ci-app-listing-search">搜索 (姓名包含或者状态等于)</label>       </div>     </ci-card>     <ci-card *ngFor="#entry of submissions | funcFilter:flt:searchStr:membersMap:getStatusText">       <ci-card-title>         {{ membersMap[entry._id].realname }}<span class="ci-annotation"> - {{ getStatusText(entry.status) }}</span>        </ci-card-title>       <ci-card-actions>         <button class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" [routerLink] = "[\'Application\', {type: formType, uid: entry._id}]">           查看表单         </button>       </ci-card-actions>     </ci-card>   </div>   <div class="ci-card-col narrow">     <ci-card>       <ci-card-title>         操作       </ci-card-title>       <div class="mdl-card__supporting-text">         <button class="mdl-button mdl-button--raised mdl-button--colored mdl-js-button mdl-js-ripple-effect" [routerLink] = "[\'Form\', {type: formType}]">           修改表单         </button>       </div>     </ci-card>   </div> </div>',directives:[card_4.CICard,router_3.ROUTER_DIRECTIVES,mdl_4.MDL],pipes:[pipes_1.CIFuncFilter]}),__metadata("design:paramtypes",[card_4.CICardService,conf_1.CIConfService,router_3.RouteParams])],CIConfApplicationList)}(card_4.CICardView),CIConfApplication=function(_super){function CIConfApplication(_card,params,_router,_conf,_login,_notifier){_super.call(this,_card),this._router=_router,this._conf=_conf,this._login=_login,this._notifier=_notifier,this.form=[],this.data={},this.userId=+params.get("uid"),this.formType=params.get("type"),this.operatorId=_login.getUser()._id,_conf.hasPerm(this.operatorId,"registrant."+this.formType+".modify")?this.canModify=!0:this.canModify=this.operatorId==this.userId,console.log(this.operatorId==this.userId),"academic"==this.formType?this.formName="学术团队申请":"participant"==this.formType?this.formName="代表报名":this.formName=this.formType}return __extends(CIConfApplication,_super),CIConfApplication.prototype.routerOnActivate=function(){var _this=this;return this._conf.getForm(this.formType,function(form){_this.form=form,_this._conf.getFormResult(_this.formType,_this.userId,function(data){_this.form.forEach(function(e,i){"checkbox"!=e.type||data.submission[i]||(data.submission[i]={})}),_this.data=data.submission,_this.status=data.status,0==_this.status?_this.statusText="未提交":1==_this.status?_this.statusText="等待审核":2==_this.status?_this.statusText="通过":3==_this.status?_this.statusText="拒绝":_this.statusText=_this.status.toString()})}),_super.prototype.routerOnActivate.call(this)},CIConfApplication.prototype.submit=function(){var _this=this,invalids=[];this.form.forEach(function(e,i){if(e.required)if("checkbox"==e.type){var flag=!1;for(var field in _this.data[i])_this.data[i][field]&&(flag=!0);flag||invalids.push(i+1)}else _this.data[i]&&""!=_this.data[i]||invalids.push(i+1)}),invalids.length>0?this._notifier.show("非法字段: "+invalids.join(", ")):this._conf.postApplication(this.formType,this.userId,this.data,function(res){_this._notifier.show(res.msg),"OperationSuccessful"==res.msg&&(_this.statusText="等待审核",_this.status=1)})},CIConfApplication=__decorate([core_10.Component({template:'<div class="ci-card-container" type="action">   <div class="ci-card-col wide">     <ci-card *ngFor="#entry of form, #i = index">       <ci-card-title>         <span class="ci-annotation-normal">{{ i+1 }}</span> <span [style.font-weight]="entry.type == \'title\' ? \'bold\' : \'inherit\'">{{ entry.title }}</span> <span class="ci-warning" *ngIf="entry.required">*</span>       </ci-card-title>        <div class="mdl-card__supporting-text" *ngIf="entry.desc">         {{ entry.desc }}       </div>        <!-- radios -->       <div class="ci-radios" *ngIf = "entry.type == \'radio\'">         <template ngFor #choice [ngForOf]="entry.choices" #j = "index">         <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" [attr.for]="\'conf-form-\' + i + \'-\' + j" ci-mdl [ngClass]="{\'is-checked\': data[i] == choice}">             <input type="radio"               [id]="\'conf-form-\' + i + \'-\' + j"               class="mdl-radio__button"               (click)="data[i] = choice"               [disabled]="!canModify"               [checked]="data[i] == choice">             <span class="mdl-radio__label">{{choice}}</span>           </label>           <br>         </template>       </div>        <!-- checkbox -->       <div class="ci-radios" *ngIf = "entry.type == \'checkbox\' && data[i]">         <template ngFor #choice [ngForOf]="entry.choices" #j = "index">           <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" [attr.for]="\'conf-form-\' + i + \'-\' + j" ci-mdl [ngClass]="{\'is-checked\': data[i][choice]}">             <input type="checkbox"               [id]="\'conf-form-\' + i + \'-\' + j"               class="mdl-checkbox__input"               [disabled]="!canModify"               [(ngModel)]="data[i][choice]">             <span class="mdl-checkbox__label">{{choice}}</span>           </label>           <br>         </template>       </div>        <!-- input -->       <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" ci-mdl *ngIf = "entry.type == \'input\'" [ngClass]="{\'is-dirty\': data[i] && data[i]!=\'\'}">         <input class="mdl-textfield__input" type="text" [id]="\'conf-form-\'+i" [(ngModel)]="data[i]" ci-mdl-input [disabled]="!canModify">         <label class="mdl-textfield__label" [attr.for]="\'conf-form-\'+i">回答</label>       </div>        <!-- textarea -->       <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" ci-mdl *ngIf = "entry.type == \'area\'" [ngClass]="{\'is-dirty\': data[i] && data[i]!=\'\'}">         <textarea class="mdl-textfield__input" type="text" [id]="\'conf-form-\'+i" rows="4" [(ngModel)]="data[i]" [disabled]="!canModify" ci-mdl-input></textarea>         <label class="mdl-textfield__label" [attr.for]="\'conf-form-\'+i">回答</label>       </div>      </ci-card>   </div>   <div class="ci-card-col narrow">     <ci-card>       <ci-card-title>         {{ formName }}       </ci-card-title>        <div class="mdl-card__supporting-text">         状态: <strong>{{ statusText }}</strong>       </div>        <ci-card-actions>         <button class="mdl-button--raised mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" (click)="submit()">           {{ status == 0? "提交" : "更新" }}         </button>       </ci-card-actions>     </ci-card>   </div> </div>',
directives:[card_4.CICard,mdl_4.MDL,router_3.ROUTER_DIRECTIVES]}),__metadata("design:paramtypes",[card_4.CICardService,router_3.RouteParams,router_3.Router,conf_1.CIConfService,login_4.CILoginService,notifier_4.CINotifier])],CIConfApplication)}(card_4.CICardView),CIConfHome=function(_super){function CIConfHome(_card,_conf,_login){_super.call(this,_card),this._conf=_conf,this._login=_login,this.userId=_login.getUser()._id}return __extends(CIConfHome,_super),CIConfHome.prototype.routerOnActivate=function(){var _this=this;return this.confData=this._conf.getConf(),this.confStatus=this._conf.getStatus(),this.confMembers=this._conf.getMemberMap(),this.confGroup=this._conf.getGroup(),this.confRoles=this._conf.getRoleMap(),console.log(this.confRoles),this.confData.members.sort(function(a,b){return a.role<b.role?-1:1}),Object.keys(this.confMembers).forEach(function(e){_this.confMembers[e].gravatar=CIUtil.generateGravatar(_this.confMembers[e].email)}),_super.prototype.routerOnActivate.call(this)},CIConfHome=__decorate([core_10.Component({template:'<div class="ci-card-container" type="action" *ngIf="confData">   <div class="ci-card-col wide">     <ci-card>       <ci-card-title>         {{ confData.title }}       </ci-card-title>       <div class="mdl-card__supporting-text" [ngClass]="{\'ci-annotation\': !confData.desc || confData.desc == \'\'}">         {{ confData.desc && confData.desc != "" ? confData.desc : "组委并未为此会议添加简介" }}       </div>     </ci-card>   </div>   <div class="ci-card-col narrow">     <ci-card>       <ci-card-title>         会议信息       </ci-card-title>       <div class="mdl-card__supporting-text">         主办方: <strong>{{ confGroup.title }}</strong>       </div>       <div class="mdl-card__supporting-text">         目前会议正在 <strong>{{ confStatus }}</strong>       </div>       <ci-card-actions [ngSwitch]="confData.status">         <div *ngSwitchWhen="1">           <button class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" [routerLink]="[\'Application\', {uid: userId, type: \'academic\'}]">             学术团队申请通道           </button>         </div>         <div class="ci-annotation" *ngSwitchDefault style="padding: 8px">           无可用快捷方式         </div>       </ci-card-actions>     </ci-card>     <ci-card>       <ci-card-title>         组织团队       </ci-card-title>       <div class="conf-member-list" *ngFor="#member of confData.members">         <img [src]="confMembers[member._id].gravatar" class="mdl-shadow--2dp">         <div class="conf-member-info">           <div class="conf-member-name">{{confMembers[member._id].realname}}</div>           <div class="conf-member-role" [title]="confRoles[member.role].title">{{confRoles[member.role].title}}</div>         </div>         <div class="masker"></div>       </div>     </ci-card>   </div>   <div class="ci-card-col">   </div> </div>',directives:[card_4.CICard,mdl_4.MDL,router_3.ROUTER_DIRECTIVES]}),__metadata("design:paramtypes",[card_4.CICardService,conf_1.CIConfService,login_4.CILoginService])],CIConfHome)}(card_4.CICardView),CIConfForm=function(_super){function CIConfForm(_card,params,_router,_conf,_notifier){_super.call(this,_card),this._router=_router,this._conf=_conf,this._notifier=_notifier,this.formType=params.get("type"),this.data=[],"academic"==this.formType?this.formName="学术团队申请":"participant"==this.formType?this.formName="代表报名":this.formName=this.formType}return __extends(CIConfForm,_super),CIConfForm.prototype.routerOnActivate=function(){var _this=this;return this._conf.getForm(this.formType,function(res){_this.data=res.map(function(e){return{title:e.title,desc:e.desc,type:e.type,choices:e.choices?e.choices.join("\n"):"",required:e.required}}),console.log(_this.data)}),_super.prototype.routerOnActivate.call(this)},CIConfForm.prototype.pushField=function(){this.data.push({type:"input"}),console.log(this.data)},CIConfForm.prototype.deleteField=function(i){this.data.splice(i,i+1)},CIConfForm.prototype.moveUp=function(i){if(0!=i){var tmp=this.data[i];this.data[i]=this.data[i-1],this.data[i-1]=tmp}},CIConfForm.prototype.moveDown=function(i){if(i!=this.data.length-1){var tmp=this.data[i];this.data[i]=this.data[i+1],this.data[i+1]=tmp}},CIConfForm.prototype.submit=function(){var _this=this,result=this.data.map(function(e){var choices=e.choices?e.choices.split("\n"):[];return"checkbox"==e.type||"radio"==e.type?{title:e.title,desc:e.desc,type:e.type,choices:choices,required:e.required}:{title:e.title,desc:e.desc,type:e.type,required:e.required}});this._conf.postForm(this.formType,result,function(res){"OperationSuccessful"==res.msg&&(_this._notifier.show(res.msg),_this._router)})},CIConfForm=__decorate([core_10.Component({template:'<div class="ci-card-container" type="action" ci-mdl>   <div class="ci-card-col wide">     <ci-card>       <ci-card-title>         编辑表单: {{ formName }}       </ci-card-title>       <ci-card-actions>         <button class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect" (click) = "pushField()">           <i class="material-icons">add</i>         </button>       </ci-card-actions>     </ci-card>     <ci-card *ngFor="#entry of data, #i = index, #last = last">       <ci-card-title>         <span class="ci-annotation-normal">{{ i+1 }}</span> {{ entry.title }} <span class="ci-warning" *ngIf="entry.required">*</span>       </ci-card-title>        <div class="ci-radios" ci-mdl>         <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" [attr.for]="\'conf-form-type-input-\'+i" [ngClass]="{\'is-checked\': entry.type==\'input\'}">           <input type="radio"             [id]="\'conf-form-type-input-\' + i"             class="mdl-radio__button"             (click)="entry.type = \'input\'"             [checked]="entry.type == \'input\'">           <span class="mdl-radio__label">文本</span>         </label>         <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" [attr.for]="\'conf-form-type-area-\'+i" [ngClass]="{\'is-checked\': entry.type==\'area\'}">           <input type="radio"             [id]="\'conf-form-type-area-\' + i"             class="mdl-radio__button"             (click)="entry.type = \'area\'"             [checked]="entry.type == \'area\'">           <span class="mdl-radio__label">文本区</span>         </label>         <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" [attr.for]="\'conf-form-type-radio-\'+i" [ngClass]="{\'is-checked\': entry.type==\'radio\'}">           <input type="radio"             [id]="\'conf-form-type-radio-\' + i"             class="mdl-radio__button"             (click)="entry.type = \'radio\'"             [checked]="entry.type == \'radio\'">           <span class="mdl-radio__label">单选</span>         </label>         <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" [attr.for]="\'conf-form-type-checkbox-\'+i" [ngClass]="{\'is-checked\': entry.type==\'checkbox\'}">           <input type="radio"             [id]="\'conf-form-type-checkbox-\' + i"             class="mdl-radio__button"             (click)="entry.type = \'checkbox\'"             [checked]="entry.type == \'checkbox\'">           <span class="mdl-radio__label">复选</span>         </label>         <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" [attr.for]="\'conf-form-type-title-\'+i" [ngClass]="{\'is-checked\': entry.type==\'title\'}">           <input type="radio"             [id]="\'conf-form-type-title-\' + i"             class="mdl-radio__button"             (click)="entry.type = \'title\'"             [checked]="entry.type == \'title\'">           <span class="mdl-radio__label">标题</span>         </label>       </div>        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" [ngClass]="{\'is-dirty\': entry.title && entry.title!=\'\'}">         <input class="mdl-textfield__input" type="text" [id]="\'conf-form-title-\' + i" [(ngModel)]="entry.title">         <label class="mdl-textfield__label" [attr.for]="\'conf-form-title-\' + i">名称</label>       </div>        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" [ngClass]="{\'is-dirty\': entry.desc && entry.desc!=\'\'}">         <textarea class="mdl-textfield__input" type="text" [id]="\'conf-form-desc-\' + i" rows="4" [(ngModel)]="entry.desc"></textarea>         <label class="mdl-textfield__label" [attr.for]="\'conf-form-desc-\' + i">说明</label>       </div>        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" [ngClass]="{\'is-dirty\': entry.choices && entry.choices!=\'\'}">         <textarea class="mdl-textfield__input" type="text" [id]="\'conf-form-choices-\' + i" rows="4" [(ngModel)]="entry.choices" [disabled]="entry.type == \'input\' || entry.type == \'area\'"></textarea>         <label class="mdl-textfield__label" [attr.for]="\'conf-form-choices-\' + i">可用选项 (每行一个)</label>       </div>        <div class="ci-radios" ci-mdl>         <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" [attr.for]="\'conf-form-required\'+i" [ngClass]="{\'is-checked\': entry.required}">           <input type="checkbox"             [id]="\'conf-form-required\' + i"             class="mdl-checkbox__input"             [(ngModel)]="entry.required">           <span class="mdl-checkbox__label">必填</span>         </label>       </div>        <ci-card-actions>         <button class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect" (click) = "deleteField(i)">           <i class="material-icons">delete</i>         </button>         <button class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect" (click) = "moveDown(i)" [hidden]="last">           <i class="material-icons">arrow_downward</i>         </button>         <button class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect" (click) = "moveUp(i)" [hidden]="i == 0">           <i class="material-icons">arrow_upward</i>         </button>       </ci-card-actions>      </ci-card>   </div>   <div class="ci-card-col narrow">     <ci-card>       <ci-card-title>         操作       </ci-card-title>       <div class="mdl-card__supporting-text">         <button class="mdl-button--raised mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" (click)="submit()">           提交         </button>       </div>     </ci-card>   </div> </div>',directives:[card_4.CICard,mdl_4.MDL]}),__metadata("design:paramtypes",[card_4.CICardService,router_3.RouteParams,router_3.Router,conf_1.CIConfService,notifier_4.CINotifier])],CIConfForm)}(card_4.CICardView),CIConfSettings=function(_super){function CIConfSettings(_card,_notifier,_conf){_super.call(this,_card),this._notifier=_notifier,this._conf=_conf,this.conf=_conf.getConf(),this.memberMap=_conf.getMemberMap(),this.settings={status:this.conf.status,title:this.conf.title,desc:this.conf.desc}}return __extends(CIConfSettings,_super),CIConfSettings.prototype.updateSettings=function(){var _this=this;this._conf.postSettings(this.conf._id,{settings:this.settings},function(res){res.msg&&_this._notifier.show("更新成功, 您可能需要刷新才能看到效果")})},CIConfSettings=__decorate([core_10.Component({template:'<div class="ci-card-container" type="1-col">   <ci-card>     <ci-card-title>       设置<!-- TODO: We need a icon here-->     </ci-card-title>     <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" ci-mdl>       <input class="mdl-textfield__input" type="text" id="ci-conf-settings-title" [(ngModel)]="settings.title">       <label class="mdl-textfield__label" for="ci-conf-settings-title">会议名称</label>     </div>     <br/>     <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" ci-mdl>       <textarea class="mdl-textfield__input" rows="4" id="ci-conf-settings-desc" [(ngModel)]="settings.desc"></textarea>       <label class="mdl-textfield__label" for="ci-conf-settings-desc">会议简介</label>     </div>      <div class="ci-radios">       <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="conf-settings-status-0" [ngClass]="{\'is-checked\': settings.status==0}">         <input type="radio"           id="conf-settings-status-0"           class="mdl-radio__button"           (click)="settings.status = 0"           [checked]="settings.status == 0">         <span class="mdl-radio__label">准备中</span>       </label>       <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="conf-settings-status-1" [ngClass]="{\'is-checked\': settings.status==1}">         <input type="radio"           id="conf-settings-status-1"           class="mdl-radio__button"           (click)="settings.status = 1"           [checked]="settings.status == 1">         <span class="mdl-radio__label">招募学术团队</span>       </label>     </div>      <ci-card-actions>       <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored mdl-button--raised" (click)="updateSettings()">         更新       </button>     </ci-card-actions>   </ci-card> </div>',directives:[mdl_4.MDL,card_4.CICard]}),__metadata("design:paramtypes",[card_4.CICardService,notifier_4.CINotifier,conf_1.CIConfService])],CIConfSettings)}(card_4.CICardView),exports_14("CIConfSettings",CIConfSettings),CIConf=function(){function CIConf(routeParams,_confService,_router,_login,_frame){this._confService=_confService,this._router=_router,this._login=_login,this._frame=_frame,this.confId=+routeParams.get("id"),this.userId=_login.getUser()._id}return CIConf.prototype.routerOnActivate=function(){var _this=this,outer=this;return new Promise(function(resolve,reject){outer._confService.getData(outer.confId,function(data){outer._confService.registerConf(data);var tabs=[{title:"主页",route:["/Conf",{id:_this.confId},"Home"],router:_this._router}];outer._confService.hasPerm(_this.userId,"registrant.academicZh.view")?tabs.push({title:"学术团队报名结果 - 中文",route:["/Conf",{id:_this.confId},"ApplicationList",{type:"academic-zh"}],router:_this._router}):tabs.push({title:"学术团队报名 - 中文",route:["/Conf",{id:_this.confId},"Application",{type:"academic-zh",uid:_this.userId}],router:_this._router}),outer._confService.hasPerm(_this.userId,"registrant.academicEn.view")?tabs.push({title:"学术团队报名结果 - 英文",route:["/Conf",{id:_this.confId},"ApplicationList",{type:"academic-en"}],router:_this._router}):tabs.push({title:"学术团队报名 - 英文",route:["/Conf",{id:_this.confId},"Application",{type:"academic-en",uid:_this.userId}],router:_this._router}),outer._confService.hasPerm(_this.userId,"settings")&&tabs.push({title:"设置",route:["/Conf",{id:_this.confId},"Settings"],router:_this._router}),_this._frame.setState("会议 - "+data.conf.title,tabs),resolve()})})},CIConf=__decorate([core_10.Component({template:"<router-outlet></router-outlet>",directives:[router_3.RouterOutlet]}),router_3.RouteConfig([{path:"/home",name:"Home",component:CIConfHome,useAsDefault:!0},{path:"/:type/list",name:"ApplicationList",component:CIConfApplicationList},{path:"/:type/:uid",name:"Application",component:CIConfApplication},{path:"/settings/form/:type",name:"Form",component:CIConfForm},{path:"/settings",name:"Settings",component:CIConfSettings}]),__metadata("design:paramtypes",[router_3.RouteParams,conf_1.CIConfService,router_3.Router,login_4.CILoginService,frame_service_4.CIFrameService])],CIConf)}(),exports_14("CIConf",CIConf),CIConfList=function(_super){function CIConfList(_card,_frame,_conf){_super.call(this,_card),this._conf=_conf,_frame.setState("会议列表",[])}return __extends(CIConfList,_super),CIConfList.prototype.routerOnActivate=function(){var _this=this;return this._conf.getAvailList(function(res){_this.confs=res,_this.confs.forEach(function(e){e.statusText=_this._conf.getStatus(e)})}),_super.prototype.routerOnActivate.call(this)},CIConfList=__decorate([core_10.Component({template:'<div class="ci-card-container" type="1-col">   <ci-card>     <ci-card-title>       正在报名中的会议     </ci-card-title>     <ci-card-table>       <table class="mdl-data-table mdl-js-data-table mdl-data-table">         <thead>           <tr>             <th class="mdl-data-table__cell--non-numeric">会议名称</th>             <th class="mdl-data-table__cell--non-numeric">状态</th>           </tr>         </thead>         <tbody>           <tr *ngFor="#conf of confs" [routerLink]="[\'Conf\', {id: conf._id}]">             <td class="mdl-data-table__cell--non-numeric">{{ conf.title }}</td>             <td class="mdl-data-table__cell--non-numeric">{{ conf.statusText }}</td>           </tr>         </tbody>       </table>     </ci-card-table>   </ci-card> </div>',directives:[mdl_4.MDL,router_3.ROUTER_DIRECTIVES,card_4.CICard],pipes:[pipes_1.CIFuncFilter]}),__metadata("design:paramtypes",[card_4.CICardService,frame_service_4.CIFrameService,conf_1.CIConfService])],CIConfList)}(card_4.CICardView),exports_14("CIConfList",CIConfList)}}}),System.register("views/misc",["angular2/core","card","frame.service","mdl"],function(exports_15,context_15){"use strict";var core_11,card_5,frame_service_5,mdl_5,CIAbout;context_15&&context_15.id;return{setters:[function(core_11_1){core_11=core_11_1},function(card_5_1){card_5=card_5_1},function(frame_service_5_1){frame_service_5=frame_service_5_1},function(mdl_5_1){mdl_5=mdl_5_1}],execute:function(){CIAbout=function(_super){function CIAbout(_cardService,_frame){_super.call(this,_cardService),_frame.setState("关于",[])}return __extends(CIAbout,_super),CIAbout.prototype.gotoJoin=function(){window.open("//bjmun.org/tt/join")},CIAbout.prototype.gotoGithubFrontend=function(){window.open("//github.com/CircuitCoder/ConsoleiT-Frontend")},CIAbout.prototype.gotoGithubBackend=function(){window.open("//github.com/CircuitCoder/ConsoleiT-Backend")},CIAbout.prototype.gotoAuthor=function(){window.open("//github.com/CircuitCoder")},CIAbout=__decorate([core_11.Component({template:'<div class="ci-card-container" type="1-col">   <ci-card>     <ci-card-title>       关于      </ci-card-title>     <div class="mdl-card__supporting-text">       <p>Console iT 是一个由北京市高中生模拟联合国协会技术团队开发的模拟联合国在线系统。</p>       <p>系统预计将囊括社团管理、会议筹备与管理、委员会文件管理个人信息更新等多个功能。系统的目标在于促进北京地区模拟联合国活动的发展与进步，让每一个模联人都能够享受到Console iT所带来的舒适与便捷。</p>        <p>         开发人员：<a style="cursor: pointer" (click)="gotoAuthor()">@CircuitCoder</a><br><br>         <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--raised" type="submit" (click) = "gotoJoin()">           加入技术团队         </button>       </p>        <p>         Console iT 注册部分在 AGPL-3.0 协议下发布<br><br>         <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--raised" type="submit" (click) = "gotoGithubFrontend()">           Console iT 前端代码库         </button><br><br>         <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--raised" type="submit" (click) = "gotoGithubBackend()">           Console iT 后端代码库         </button>       </p>     </div>   </ci-card> </div>',directives:[card_5.CICard,mdl_5.MDL]}),__metadata("design:paramtypes",[card_5.CICardService,frame_service_5.CIFrameService])],CIAbout)}(card_5.CICardView),exports_15("CIAbout",CIAbout)}}}),System.register("frame",["angular2/core","angular2/router","angular2/http","frame.service","card","notifier","login","conf","views/dashboard","views/login","views/profile","views/conf","views/misc","util"],function(exports_16,context_16){"use strict";var core_12,router_4,http_6,frame_service_6,card_6,notifier_5,login_5,conf_2,dashboard_1,login_6,profile_1,conf_3,misc_1,CIUtil,CIFrame;context_16&&context_16.id;return{setters:[function(core_12_1){core_12=core_12_1},function(router_4_1){router_4=router_4_1},function(http_6_1){http_6=http_6_1},function(frame_service_6_1){frame_service_6=frame_service_6_1},function(card_6_1){card_6=card_6_1},function(notifier_5_1){notifier_5=notifier_5_1},function(login_5_1){login_5=login_5_1},function(conf_2_1){conf_2=conf_2_1},function(dashboard_1_1){dashboard_1=dashboard_1_1},function(login_6_1){login_6=login_6_1},function(profile_1_1){profile_1=profile_1_1},function(conf_3_1){conf_3=conf_3_1},function(misc_1_1){misc_1=misc_1_1},function(CIUtil_2){CIUtil=CIUtil_2}],execute:function(){CIFrame=function(){function CIFrame(_loginService,_router,_notifier,_confService,_frameService,_http,_el){var _this=this;this._loginService=_loginService,this._router=_router,this._notifier=_notifier,this._confService=_confService,this._frameService=_frameService,this._http=_http,this._el=_el,this.notif=new Array,this.user=null,this.avatarUrl="",this.started=!1,this.confs=[],this.tabs=[],this.title="",this.titleAnimating=!1,this.tabAnimating=!1;var outer=this;_frameService.setFrame(this),_loginService.addListener({onLogin:function(user){outer.user=user,outer.avatarUrl=CIUtil.generateGravatar(user.email),outer._router.navigate(["Dashboard"]),_this.updateSidebar()},onLogout:function(){console.log("Logout"),outer.user=null,outer._router.navigate(["Login"])},onRestore:function(error,user){error?outer._router.isRouteActive(outer._router.generate(["Login"]))||outer._router.isRouteActive(outer._router.generate(["Register"]))||(outer._notifier.show(error),outer._router.navigate(["Login"])):(outer.user=user,outer.avatarUrl=CIUtil.generateGravatar(user.email),console.log(outer.avatarUrl),(outer._router.isRouteActive(outer._router.generate(["Login"]))||outer._router.isRouteActive(outer._router.generate(["Register"])))&&(outer._notifier.show("AlreadyLoggedIn"),outer._router.navigate(["Dashboard"]))),outer.started=!0,_this.updateSidebar()}})}return CIFrame.prototype.ngAfterViewInit=function(){this._loginService.doRestore()},CIFrame.prototype.setState=function(title,tabs){var _this=this;console.log(tabs),title&&(this.titleAnimating=!0,setTimeout(function(){_this.title=title,_this.titleAnimating=!1},200)),tabs&&(this.tabAnimating=!0,setTimeout(function(){_this.tabs=tabs,_this.tabAnimating=!1,componentHandler.downgradeElements(_this._el.nativeElement.getElementsByClassName("mdl-layout__tab-bar")[0]),setTimeout(function(){componentHandler.upgradeElements(_this._el.nativeElement.getElementsByClassName("mdl-layout__tab-bar")[0])},0)},200))},CIFrame.prototype.isRouteActive=function(route,router){return router?router.isRouteActive(router.generate(route)):this._router.isRouteActive(this._router.generate(route))},CIFrame.prototype.logout=function(){this._loginService.doLogout()},CIFrame.prototype.closeDrawer=function($event){for(var drawer=this._el.nativeElement.getElementsByClassName("ci-drawer")[0],target=$event.target;;){if("A"==target.tagName||"BUTTON"==target.tagName)return void this._el.nativeElement.getElementsByClassName("mdl-layout")[0].MaterialLayout.toggleDrawer();if(target==drawer)return;target=target.parentNode}},CIFrame.prototype.updateSidebar=function(){var _this=this;this._confService.getList(function(res){_this.confs=res,console.log(res)})},CIFrame.prototype.gotoConf=function(id){},CIFrame=__decorate([core_12.Component({selector:"ci-frame",template:'<div class="mdl-layout mdl-js-layout mdl-layout--fixed-header" ci-mdl [ngClass]="{\'ci-anonymous\': user==null}" *ngIf="started">   <header class="mdl-layout__header" [ngClass]="{\'ci-tabs\': tabs.length != 0, \'ci-tab-animating\': tabAnimating, \'ci-title-animating\': titleAnimating}" ci-mdl>     <div class="mdl-layout__header-row">       <span class="mdl-layout-title">{{ title }}</span>       <div class="mdl-layout-spacer"></div>       <div class="mdl-naivgation">         <button class="mdl-button mdl-js-button mdl-button--icon" id="ci-notif-badge">           <i class="material-icons" *ngIf="notif.length == 0">notifications_none</i>           <i class="material-icons" *ngIf="notif.length > 0">notifications_active</i>         </button>         <div class="mdl-tooltip" for="ci-notif-badge">           通知功能暂未实现         </div>       </div>     </div>      <div class="mdl-layout__tab-bar mdl-js-ripple-effect">       <a *ngFor="#tab of tabs" class="mdl-layout__tab" [routerLink]="tab.route" [ngClass]="{\'is-active\': isRouteActive(tab.route, tab.router)}">         {{ tab.title }}         <span class="mdl-layout__tab-ripple-container mdl-js-ripple-effect">           <span class="mdl-ripple"></span>         </span>       </a>     </div>   </header>    <div class="mdl-layout__drawer ci-drawer" (click)="closeDrawer($event)">     <span class="mdl-layout-title">       <img src="/assets/imgs/console-45f6ce1296.svg" class="ci-brand">     </span>     <nav class="mdl-navigation">       <a [routerLink]="[\'Dashboard\']" class="mdl-navigation__link">主页</a>        <a *ngFor="#conf of confs" class="mdl-navigation__link" [routerLink]="[\'Conf\', {id: conf._id}]">{{ conf.title }}</a>        <a [routerLink]="[\'ConfList\']" class="mdl-navigation__link">全部会议</a>       <a [routerLink]="[\'About\']" class="mdl-navigation__link">关于</a>     </nav>      <div class="profile-box" *ngIf="user">       <img [src]="avatarUrl" class="mdl-shadow--2dp">       <div class="realname">{{ user.realname }}</div>       <div class="email">{{ user.email }}</div>       <div class="operations">         <button class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect" (click)="logout()">           <i class="material-icons">power_settings_new</i>         </button>         <button class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect" [routerLink]="[\'Profile\']">           <i class="material-icons">person</i>         </button>         <button class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect" [routerLink]="[\'Settings\']" *ngIf="user.isRoot">           <i class="material-icons">settings</i>         </button>       </div>        <div class="masker"></div>     </div>   </div>    <main class="mdl-layout__content">     <div class="ci-frame-container">       <router-outlet></router-outlet>     </div>   </main> </div>',directives:[router_4.ROUTER_DIRECTIVES],providers:[login_5.CILoginService,notifier_5.CINotifier,conf_2.CIConfService,card_6.CICardService,frame_service_6.CIFrameService]}),router_4.RouteConfig([{path:"/dashboard",name:"Dashboard",component:dashboard_1.CIDashboard,useAsDefault:!0},{path:"/login",name:"Login",component:login_6.CILogin,data:{action:"login"}},{path:"/register",name:"Register",component:login_6.CILogin,data:{action:"register"}},{path:"/profile",name:"Profile",component:profile_1.CIProfile},{path:"/conf/list",name:"ConfList",component:conf_3.CIConfList},{path:"/conf/:id/...",name:"Conf",component:conf_3.CIConf},{path:"/settings",name:"Settings",component:dashboard_1.CIDashboard},{path:"/about",name:"About",component:misc_1.CIAbout},{path:"/**",redirectTo:["Dashboard"]}]),__metadata("design:paramtypes",[login_5.CILoginService,router_4.Router,notifier_5.CINotifier,conf_2.CIConfService,frame_service_6.CIFrameService,http_6.Http,core_12.ElementRef])],CIFrame)}(),exports_16("CIFrame",CIFrame)}}}),System.register("frame.service",["angular2/core"],function(exports_17,context_17){"use strict";var core_13,CIFrameService;context_17&&context_17.id;return{setters:[function(core_13_1){core_13=core_13_1}],execute:function(){CIFrameService=function(){function CIFrameService(){}return CIFrameService.prototype.setFrame=function(frame){this.frame=frame},CIFrameService.prototype.setState=function(title,tabs){this.frame.setState(title,tabs)},CIFrameService=__decorate([core_13.Injectable(),__metadata("design:paramtypes",[])],CIFrameService)}(),exports_17("CIFrameService",CIFrameService)}}}),System.register("monkeypatch",["angular2/http","angular2/core"],function(exports_18,context_18){"use strict";var http_7,core_14,CORSBrowserXHR;context_18&&context_18.id;return{setters:[function(http_7_1){http_7=http_7_1},function(core_14_1){core_14=core_14_1}],execute:function(){CORSBrowserXHR=function(_super){function CORSBrowserXHR(){_super.apply(this,arguments)}return __extends(CORSBrowserXHR,_super),CORSBrowserXHR.prototype.build=function(){console.log("ConsoleiT Warning: Patching Xhr request");var xhr=_super.prototype.build.call(this);return xhr.withCredentials=!0,xhr},CORSBrowserXHR=__decorate([core_14.Injectable(),__metadata("design:paramtypes",[])],CORSBrowserXHR)}(http_7.BrowserXhr),exports_18("CORSBrowserXHR",CORSBrowserXHR)}}}),System.register("main",["angular2/platform/browser","angular2/core","angular2/http","angular2/router","frame","monkeypatch","config"],function(exports_19,context_19){"use strict";function start(){console.log(config),browser_1.bootstrap(frame_1.CIFrame,[router_5.ROUTER_PROVIDERS,http_8.HTTP_PROVIDERS,core_15.provide(http_8.BrowserXhr,{useClass:monkeypatch_1.CORSBrowserXHR})])}var browser_1,core_15,http_8,router_5,frame_1,monkeypatch_1,config;context_19&&context_19.id;return exports_19("start",start),{setters:[function(browser_1_1){browser_1=browser_1_1},function(core_15_1){core_15=core_15_1},function(http_8_1){http_8=http_8_1},function(router_5_1){router_5=router_5_1},function(frame_1_1){frame_1=frame_1_1},function(monkeypatch_1_1){monkeypatch_1=monkeypatch_1_1},function(config_1){config=config_1}],execute:function(){}}});